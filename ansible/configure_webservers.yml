- name: Install and configure NGINX on web hosts
  hosts: webservers
  become: true
  vars:
    local_state_file: /tmp/terraform.tfstate
    
  tasks:
    - name: Install NGINX
      apt:
        name: nginx
        state: present
        update_cache: true

    - name: Ensure NGINX is running and enabled
      service:
        name: nginx
        state: started
        enabled: true

    - name: Get the hostname
      command: hostname
      register: hostname_output

    - name: Read terraform.tfstate
      slurp:
        src: "{{ local_state_file }}"
      register: raw_tfstate
      delegate_to: localhost

    - name: Parse tfstate JSON
      ansible.builtin.set_fact:
        tfstate: "{{ raw_tfstate.content | b64decode | from_json }}"
      delegate_to: localhost
        
    - name: Get RDS resource dictionary for aws_db_instance.postgres
      set_fact:
        postgres_resource: >-
          {{ tfstate.resources
             | selectattr('type', 'equalto', 'aws_db_instance')
             | selectattr('name', 'equalto', 'postgres')
             | list | first }}
      delegate_to: localhost
  
    - name: Extract postgres hostname
      set_fact:
        db_host: "{{ postgres_resource.instances[0].attributes.address }}"
        db_name: "{{ postgres_resource.instances[0].attributes.db_name }}"
        db_port: "{{ postgres_resource.instances[0].attributes.port }}"
        db_user: "{{ postgres_resource.instances[0].attributes.username }}"
        db_password: "{{ postgres_resource.instances[0].attributes.password }}"
      no_log: true #to ensure db_password is not printed on the console
      delegate_to: localhost
      
    - name: Read content from PostgreSQL
      community.postgresql.postgresql_query:
        db: "{{ db_name }}"
        login_host: "{{ db_host }}"
        login_user: "{{ db_user }}"
        login_password: "{{ db_password }}"
        port: "{{ db_port }}"
        query: SELECT * FROM cars;
      register: query_result
      no_log: true
      vars:
        ansible_python_interpreter: /opt/hostedtoolcache/Python/3.12.3/x64/bin/python
      delegate_to: localhost

    - name: Show query results for debugging (optional)
      debug:
        var: query_result
      delegate_to: localhost
   
    - name: Set font color based on hostname
      set_fact:
        font_color: >-
          {% if inventory_hostname == 'UbuntuWebServer1' %}
            teal
          {% else %}
            white
          {% endif %}
      delegate_to: localhost

    - name: Set font color based on hostname
      set_fact:
        bg_color: >-
          {% if inventory_hostname == 'UbuntuWebServer1' %}
            white
          {% else %}
            teal
          {% endif %}
      delegate_to: localhost
     
    - name: Create index.html with Hello World and hostname
      copy:
        dest: /var/www/html/index.html
        content: |
          <!DOCTYPE html>
          <html>
          <head>
            <style>
              table {
                background-color: {{ bg_color }};
                color: {{ font_color }};
                border: 2px solid {{ font_color }};
                border-radius: 10px;
                width: 300px;
                margin: 100px auto;
                text-align: center;
                font-family: Arial, sans-serif;
                box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
              }
          
              td {
                padding: 20px;
                border-bottom: 1px solid {{ font_color }};
              }
          
              tr:last-child td {
                border-bottom: none;
              }
            </style>
          </head>
          <body>
          
            <table>
              <tr>
                <td>Hello World!</td>
              </tr>
              <tr>
                <td>{{ ansible_hostname }}</td>
              </tr>
              <tr>
                  <table>
                    <tr>
                      <th>ID</th>
                      <th>Brand</th>
                      <th>Model</th>
                      <th>Year</th>
                    </tr>
                    {% for car in query_result.query_result %}
                    <tr>
                      <td>{{ car.id }}</td>
                      <td>{{ car.brand }}</td>
                      <td>{{ car.model }}</td>
                      <td>{{ car.year }}</td>
                    </tr>
                    {% endfor %}
                  </table>
              </tr>
            </table>
          
          </body>
          </html>
#############################################################################################################
    - name: Create nginx watchdog script
      copy:
        dest: /usr/local/bin/nginx_watchdog.sh
        content: |
          #!/bin/bash
          if ! systemctl is-active --quiet nginx; then
              systemctl start nginx
          fi
        owner: root
        group: root
        mode: '0755'

    - name: Create cron job to check nginx every 5 minutes
      cron:
        name: "Nginx watchdog - restart if not running"
        job: "/usr/local/bin/nginx_watchdog.sh"
        minute: "*/5"
        user: root
