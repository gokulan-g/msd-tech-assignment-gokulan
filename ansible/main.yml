- name: Generate Ansible inventory from terraform.tfstate
  hosts: localhost
  gather_facts: false

  vars:
    tfstate_path: "../terraform/terraform.tfstate"
    inventory_path: "./inventories.ini"
    db_name: mydb
    db_user: postgres
    db_port: 5432
    ansible_python_interpreter: /opt/hostedtoolcache/Python/3.12.3/x64/bin/python
    

  tasks:
    - name: Ensure previous ansible/inventories.ini is deleted
      ansible.builtin.file:
        path: "{{ inventory_path }}"
        state: absent

    - name: Read terraform.tfstate
      slurp:
        src: "{{ tfstate_path }}"
      register: raw_tfstate

    - name: Parse tfstate JSON
      ansible.builtin.set_fact:
        tfstate: "{{ raw_tfstate.content | b64decode | from_json }}"

    - name: Extract EC2 instances with 'Name' tag
      set_fact:
        named_instances: >-
          {{
            tfstate.resources
            | selectattr('type', 'equalto', 'aws_instance')
            | map(attribute='instances') | sum(start=[])
            | map(attribute='attributes')
            | selectattr('tags.Name', 'defined')
          }}

    - name: Write inventory.ini file for Ansible
      copy:
        dest: "{{ inventory_path }}"
        content: |
          [webservers]
          {% for inst in named_instances %}
          {{ inst.tags.Name | replace(' ', '_') }} ansible_host={{ inst.public_ip }} ansible_user=ubuntu ansible_python_interpreter=/usr/bin/python3 ansible_ssh_common_args='-o StrictHostKeyChecking=no'
          {% endfor %}
   
    - name: Extract postgres hostname
      set_fact:
        db_host: "{{ tfstate.outputs.postgres_endpoint.value.split(':')[0] }}"
       
    - name: Create cars table
      community.postgresql.postgresql_query:
        db: "{{ db_name }}"
        login_host: "{{ db_host }}"
        login_user: "{{ db_user }}"
        login_password: "{{ db_password }}"
        port: "{{ db_port }}"
        query: |
          CREATE TABLE IF NOT EXISTS cars (
              id SERIAL PRIMARY KEY,
              brand TEXT,
              model TEXT,
              year INT
          );
      no_log: true

    - name: Insert car data
      #no_log: true
      community.postgresql.postgresql_query:
        db: "{{ db_name }}"
        login_host: "{{ db_host }}"
        login_user: "{{ db_user }}"
        login_password: "{{ db_password }}"
        port: "{{ db_port }}"
        query: |
          INSERT INTO cars (brand, model, year) VALUES
          ('Toyota', 'Corolla', 2020),
          ('Honda', 'Civic', 2019),
          ('Ford', 'Mustang', 2021);

